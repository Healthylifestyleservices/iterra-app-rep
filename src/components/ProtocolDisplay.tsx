import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Sparkles, Heart, Leaf, Download, Share2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ProtocolData {
  recommendations: string[];
  chakra_focus: string;
  emotional_state: string;
  pet_safe: boolean;
  primary_concern: string;
}

interface IntakeResult {
  success: boolean;
  intake_id: string;
  protocol_id: string;
  recommendations: string[];
  message: string;
  data: {
    intake: any;
    protocol: {
      protocol_data: ProtocolData;
    };
  };
}

const ProtocolDisplay: React.FC = () => {
  const { toast } = useToast();
  const [protocolData, setProtocolData] = useState<ProtocolData | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Load protocol data from localStorage
    const storedResults = localStorage.getItem('intakeResults');
    if (storedResults) {
      try {
        const results: IntakeResult = JSON.parse(storedResults);
        if (results.success && results.data?.protocol?.protocol_data) {
          setProtocolData(results.data.protocol.protocol_data);
        }
      } catch (error) {
        console.error('Error parsing stored results:', error);
      }
    }
    setLoading(false);
  }, []);

  const handleDownload = () => {
    if (!protocolData) return;
    
    const protocolText = `
Personalized Wellness Protocol

Emotional State: ${protocolData.emotional_state}
Chakra Focus: ${protocolData.chakra_focus}
Pet Safe: ${protocolData.pet_safe ? 'Yes' : 'No'}

Recommended Essential Oils:
${protocolData.recommendations.map(oil => `â€¢ ${oil}`).join('\n')}

Primary Concern: ${protocolData.primary_concern}

Generated by iTerra Wellness Assistant
    `;
    
    const blob = new Blob([protocolText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'wellness-protocol.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Downloaded!",
      description: "Your wellness protocol has been downloaded."
    });
  };

  const handleShare = async () => {
    if (!protocolData) return;
    
    const shareText = `My personalized wellness protocol focuses on ${protocolData.emotional_state} state with ${protocolData.recommendations.slice(0, 3).join(', ')} essential oils. Created with iTerra Wellness Assistant!`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Wellness Protocol',
          text: shareText
        });
      } catch (error) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback - copy to clipboard
      navigator.clipboard.writeText(shareText);
      toast({
        title: "Copied!",
        description: "Protocol summary copied to clipboard."
      });
    }
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto py-12 text-center">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/2 mx-auto mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/3 mx-auto"></div>
        </div>
      </div>
    );
  }

  if (!protocolData) {
    return (
      <div className="max-w-4xl mx-auto py-12 text-center">
        <h2 className="text-2xl font-bold text-gray-600 mb-4">No Protocol Found</h2>
        <p className="text-gray-500 mb-6">Please complete the intake assessment first.</p>
        <Button 
          onClick={() => {
            const event = new CustomEvent('navigate', { detail: 'intake' });
            window.dispatchEvent(event);
          }}
          className="bg-gradient-to-r from-purple-600 to-pink-600 text-white"
        >
          Take Assessment
        </Button>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
          Your Personalized Wellness Protocol
        </h1>
        <p className="text-gray-600">Tailored recommendations based on your assessment</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Heart className="h-5 w-5 text-pink-500" />
            Emotional & Energetic Profile
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-semibold text-gray-700 mb-2">Current State</h3>
              <Badge variant="secondary" className="text-lg px-3 py-1">
                {protocolData.emotional_state}
              </Badge>
            </div>
            <div>
              <h3 className="font-semibold text-gray-700 mb-2">Chakra Focus</h3>
              <Badge variant="outline" className="text-lg px-3 py-1">
                {protocolData.chakra_focus || 'Not specified'}
              </Badge>
            </div>
          </div>
          {protocolData.pet_safe && (
            <div className="flex items-center gap-2 text-green-600">
              <Leaf className="h-4 w-4" />
              <span className="text-sm">Pet-safe recommendations included</span>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-yellow-500" />
            Recommended Essential Oils
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {protocolData.recommendations.map((oil, index) => (
              <div key={index} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                <h3 className="font-semibold text-gray-800 mb-2">{oil}</h3>
                <p className="text-sm text-gray-600">
                  Recommended for {protocolData.emotional_state.toLowerCase()} state
                </p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {protocolData.primary_concern && (
        <Card>
          <CardHeader>
            <CardTitle>Primary Wellness Focus</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 italic">"{protocolData.primary_concern}"</p>
          </CardContent>
        </Card>
      )}

      <div className="flex justify-center gap-4 pt-6">
        <Button 
          onClick={handleDownload}
          variant="outline"
          className="flex items-center gap-2"
        >
          <Download className="h-4 w-4" />
          Download Protocol
        </Button>
        <Button 
          onClick={handleShare}
          variant="outline"
          className="flex items-center gap-2"
        >
          <Share2 className="h-4 w-4" />
          Share Protocol
        </Button>
        <Button 
          onClick={() => {
            const event = new CustomEvent('navigate', { detail: 'intake' });
            window.dispatchEvent(event);
          }}
          className="bg-gradient-to-r from-purple-600 to-pink-600 text-white"
        >
          Take New Assessment
        </Button>
      </div>
    </div>
  );
};

export default ProtocolDisplay;